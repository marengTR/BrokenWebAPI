{"version":"1.117.0","results":[{"check_id":"csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure","path":"BrokenWebAPI/Program.cs","start":{"line":85,"col":1,"offset":2235},"end":{"line":85,"col":33,"offset":2267},"extra":{"message":"Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering.","metadata":{"category":"security","technology":["csharp"],"owasp":["A06:2017 - Security Misconfiguration","A04:2021 - Insecure Design"],"cwe":["CWE-209: Generation of Error Message Containing Sensitive Information"],"references":["https://cwe.mitre.org/data/definitions/209.html","https://owasp.org/Top10/A04_2021-Insecure_Design/"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure","shortlink":"https://sg.run/XvkA"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"csharp.lang.security.sqli.csharp-sqli.csharp-sqli","path":"BrokenWebAPI/Services/DatabaseService.cs","start":{"line":28,"col":59,"offset":990},"end":{"line":28,"col":64,"offset":995},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.","metadata":{"category":"security","technology":["csharp"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"confidence":"MEDIUM","references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli","shortlink":"https://sg.run/d2Xd"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"csharp.lang.security.sqli.csharp-sqli.csharp-sqli","path":"BrokenWebAPI/Services/DatabaseService.cs","start":{"line":60,"col":55,"offset":2215},"end":{"line":60,"col":60,"offset":2220},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.","metadata":{"category":"security","technology":["csharp"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"confidence":"MEDIUM","references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli","shortlink":"https://sg.run/d2Xd"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"dockerfile.security.missing-user-entrypoint.missing-user-entrypoint","path":"Dockerfile","start":{"line":19,"col":1,"offset":511},"end":{"line":19,"col":70,"offset":580},"extra":{"message":"By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.","fix":"USER non-root\nENTRYPOINT [\"dotnet\", \"BrokenWebAPI.dll\", \"--environment=Production\"]","metadata":{"cwe":["CWE-269: Improper Privilege Management"],"category":"security","technology":["dockerfile"],"confidence":"MEDIUM","owasp":["A04:2021 - Insecure Design"],"references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint","shortlink":"https://sg.run/k281"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":[".dockerignore",".gitignore","BrokenWebAPI/BrokenWebAPI.csproj","BrokenWebAPI/Controllers/AuthController.cs","BrokenWebAPI/Controllers/FileController.cs","BrokenWebAPI/Controllers/UserDeviceController.cs","BrokenWebAPI/Models/User.cs","BrokenWebAPI/Program.cs","BrokenWebAPI/Properties/launchSettings.json","BrokenWebAPI/Services/DatabaseService.cs","BrokenWebAPI/WeatherForecast.cs","BrokenWebAPI/appsettings.Production.json","BrokenWebAPI.sln","Dockerfile","README.md","docker-compose.sast.yml","semgrep-results.json"]},"skipped_rules":[]}